package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsSequencerServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

    DadkvsServerState server_state;
    int timestamp;
	DadkvsSequencerServiceGrpc.DadkvsSequencerServiceBlockingStub sequencerStub;
	private final ManagedChannel sequencerChannel;
    
    public DadkvsMainServiceImpl(DadkvsServerState state) {
        this.server_state = state;
		this.timestamp = 0;
		this.sequencerChannel = ManagedChannelBuilder.forAddress("localhost", 8090).usePlaintext().build();
		this.sequencerStub = DadkvsSequencerServiceGrpc.newBlockingStub(sequencerChannel);
    }

    @Override
    public void read(DadkvsMain.ReadRequest request, StreamObserver<DadkvsMain.ReadReply> responseObserver) {
	// for debug purposes
	System.out.println("Receiving read request:" + request);

	int reqid = request.getReqid();
	int key = request.getKey();
	VersionedValue vv = this.server_state.store.read(key);
	
	DadkvsMain.ReadReply response =DadkvsMain.ReadReply.newBuilder()
	    .setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();
	
	responseObserver.onNext(response);
	responseObserver.onCompleted();
    }

    @Override
    public void committx(DadkvsMain.CommitRequest request, StreamObserver<DadkvsMain.CommitReply> responseObserver) {
	// for debug purposes
	System.out.println("Receiving commit request:" + request);
	boolean result = false;
	// for debug purposes
		DadkvsServer.debug(this.getClass().getName(), "Receiving commit request:" +
				"reqid: " + request.getReqid() + " key1 " + request.getKey1() +
				" v1 " + request.getVersion1() +
				" k2 " + request.getKey2() + " v2 " + request.getVersion2() +
				" wk " + request.getWritekey() +
				" writeval " + request.getWriteval());

	if (this.server_state.isLeader()) {
		result = this.server_state.runPaxos(request);
	}

	DadkvsServer.debug(this.getClass().getSimpleName(), "Result for reqid " + request.getReqid() + " result " + result);
	DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
	    .setReqid(request.getReqid()).setAck(result).build();
	responseObserver.onNext(response);
	responseObserver.onCompleted();
    }
}
